# .github/workflows/build-wireshark-win64.yml
name: Build Wireshark Win64 (custom asterix)

on:
  workflow_dispatch:
    inputs:
      WIRESHARK_TAG:
        description: "Wireshark git tag (e.g., v4.4.8)"
        required: false
        default: "v4.4.8"
  push:
    branches: [ main, master ]

jobs:
  build-win64:
    runs-on: windows-2022
    env:
      CONFIG: RelWithDebInfo
      # Wireshark downloads third-party libs (except Qt) under this base dir
      WIRESHARK_BASE_DIR: C:\Development

    steps:
      - name: Checkout (repo contains packet-asterix.c)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install build tools (CMake, NSIS, winflexbison)
        shell: powershell
        run: |
          choco install -y cmake --installargs 'ADD_CMAKE_TO_PATH=System'
          choco install -y nsis 7zip winflexbison3

      - name: Install Qt 6 (MSVC 2022 x64)
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.8.3'
          target: 'desktop'
          arch: 'win64_msvc2022_64'
          cache: true

      - name: Export Qt dir for Wireshark
        shell: powershell
        run: |
          "WIRESHARK_QT6_PREFIX_PATH=$env:QT_ROOT_DIR" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Create base dir for downloaded libs
        shell: powershell
        run: New-Item -ItemType Directory -Force "C:\Development" | Out-Null

      - name: Clone Wireshark sources
        shell: cmd
        run: |
          git clone https://gitlab.com/wireshark/wireshark.git
          cd wireshark
          git fetch --tags --force
          git checkout "%WIRESHARK_TAG%"
        env:
          WIRESHARK_TAG: ${{ github.event.inputs.WIRESHARK_TAG || 'v4.4.8' }}

      - name: Inject custom packet-asterix.c
        shell: powershell
        run: |
          Copy-Item -Force ".\packet-asterix.c" ".\wireshark\epan\dissectors\packet-asterix.c"

      # Use cmd.exe so MSYS2 env vars don't leak into CMake
      - name: Configure (CMake + VS 2022 x64)
        shell: cmd
        run: |
          cmake -S wireshark -B build -G "Visual Studio 17 2022" -A x64 -DCMAKE_PREFIX_PATH="%WIRESHARK_QT6_PREFIX_PATH%"

      - name: Build Wireshark
        shell: cmd
        run: cmake --build build --config %CONFIG% --target wireshark

      # Optional installer (keep or remove these next two steps)
      - name: Prep NSIS packaging
        shell: cmd
        run: cmake --build build --config %CONFIG% --target wireshark_nsis_prep

      - name: Build NSIS installer
        shell: cmd
        run: cmake --build build --config %CONFIG% --target wireshark_nsis

      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: wireshark-installer
          path: build/packaging/nsis/*.exe

      # ---- Portable (no installer): zip run\RelWithDebInfo -------------------
      - name: Create portable launcher and ZIP
        shell: powershell
        run: |
          $runDir = "build\run\RelWithDebInfo"
          if (!(Test-Path $runDir)) { throw "Run dir not found: $runDir" }

          # Make a tiny launcher that isolates config beside the EXE
          $launcher = Join-Path $runDir "Wireshark-Portable.cmd"
          @"
@echo off
setlocal
set "WIRESHARK_CONFIG_DIR=%~dp0config"
if not exist "%WIRESHARK_CONFIG_DIR%" mkdir "%WIRESHARK_CONFIG_DIR%"
start "" "%~dp0Wireshark.exe" %*
"@ | Out-File -Encoding ASCII $launcher

          # Zip the self-contained run directory
          7z a -r "build\wireshark-portable-win64.zip" "$runDir\*"

      - name: Upload portable artifact
        uses: actions/upload-artifact@v4
        with:
          name: wireshark-portable
          path: build/wireshark-portable-win64.zip

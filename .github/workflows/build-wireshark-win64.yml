name: Build Wireshark Win64 (custom asterix)

on:
  workflow_dispatch:
    inputs:
      WIRESHARK_TAG:
        description: "Wireshark git tag (e.g., v4.4.8)"
        required: false
        default: "v4.4.8"
  push:
    branches: [ main, master ]

jobs:
  build-win64:
    runs-on: windows-2022
    env:
      CONFIG: RelWithDebInfo
      QT_VERSION: 6.8.3
      QT_ARCH: win64_msvc2022_64
      QT_DIR: ${{ github.workspace }}\Qt
      # Let CMake decide the libs folder name under this base dir:
      WIRESHARK_BASE_DIR: C:\Development

    steps:
      - name: Checkout (repo contains packet-asterix.c)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install build tools (CMake, NSIS)
        shell: powershell
        run: |
          choco install -y cmake --installargs 'ADD_CMAKE_TO_PATH=System'
          choco install -y nsis 7zip winflexbison3

      # Install Qt 6 for MSVC 2022 x64
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          target: desktop
          arch: ${{ env.QT_ARCH }}
          dir: ${{ env.QT_DIR }}
          cache: true

      # Point Wireshark to Qt (per docs you can use CMAKE_PREFIX_PATH or WIRESHARK_QT6_PREFIX_PATH)
      - name: Set Qt env for CMake
        shell: powershell
        run: |
          $qt = Join-Path "${{ env.QT_DIR }}" "6.8.3\msvc2022_64"
          if (-not (Test-Path $qt)) { throw "Qt path not found: $qt" }
          "WIRESHARK_QT6_PREFIX_PATH=$qt" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Make base dir for Wireshark libs
        shell: powershell
        run: New-Item -ItemType Directory -Force "C:\Development" | Out-Null

      - name: Clone Wireshark sources
        shell: bash
        run: |
          git clone https://gitlab.com/wireshark/wireshark.git
          cd wireshark
          git fetch --tags --force
          git checkout "${{ github.event.inputs.WIRESHARK_TAG || 'v4.4.8' }}"

      - name: Inject custom packet-asterix.c
        shell: powershell
        run: |
          Copy-Item -Force ".\packet-asterix.c" ".\wireshark\epan\dissectors\packet-asterix.c"

      # Clear MSYS2 noise so we don't get "Using MSYS2 with MSYSTEM=MINGW64"
      - name: Configure (CMake + VS 2022 x64; let CMake fetch Wireshark libs)
        shell: bash
        run: |
          unset MSYSTEM MSYS2_PATH_TYP

# .github/workflows/build-wireshark-win64.yml
name: Build Wireshark Win64 (custom asterix)

on:
  workflow_dispatch:
    inputs:
      WIRESHARK_TAG:
        description: "Wireshark git tag (e.g., v4.4.8)"
        required: false
        default: "v4.4.8"
  push:
    branches: [ main, master ]

jobs:
  build-win64:
    runs-on: windows-latest
    env:
      CONFIG: RelWithDebInfo
      TRIPLET: x64-windows
      VCPKG_ROOT: ${{ runner.temp }}\vcpkg

    steps:
      - name: Checkout this repo (contains only packet-asterix.c)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install build tools (CMake, NSIS)
        shell: powershell
        run: |
          choco install -y cmake --installargs 'ADD_CMAKE_TO_PATH=System'
          choco install -y nsis 7zip

      # --- vcpkg: clone (to compute a stable cache key) -----------------------
      - name: Prepare vcpkg (clone to get commit for cache key)
        id: vcpkg_prep
        shell: powershell
        run: |
          git clone https://github.com/microsoft/vcpkg $env:VCPKG_ROOT
          Push-Location $env:VCPKG_ROOT
          $commit = (git rev-parse HEAD).Trim()
          Pop-Location
          "commit=$commit" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      # Cache vcpkg installed packages and downloads
      - name: Restore vcpkg cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.VCPKG_ROOT }}\installed
            ${{ env.VCPKG_ROOT }}\downloads
          key: vcpkg-${{ steps.vcpkg_prep.outputs.commit }}-${{ env.TRIPLET }}-glib-gcrypt-gpgerror-pkgconf
          restore-keys: |
            vcpkg-${{ steps.vcpkg_prep.outputs.commit }}-${{ env.TRIPLET }}-
            vcpkg-${{ env.TRIPLET }}-

      - name: Bootstrap vcpkg
        shell: powershell
        run: |
          & "$env:VCPKG_ROOT\bootstrap-vcpkg.bat"

      - name: Install deps via vcpkg (x64-windows)
        shell: powershell
        run: |
          & "$env:VCPKG_ROOT\vcpkg.exe" install glib:${{ env.TRIPLET }} pkgconf:${{ env.TRIPLET }} `
                                             libgcrypt:${{ env.TRIPLET }} libgpg-error:${{ env.TRIPLET }}

      # Expose pkg-config + prefix so CMake's find modules see vcpkg
      - name: Set up pkg-config env
        shell: powershell
        run: |
          $pkgconf = Join-Path $env:VCPKG_ROOT 'installed\${{ env.TRIPLET }}\tools\pkgconf\pkgconf.exe'
          $pc1     = Join-Path $env:VCPKG_ROOT 'installed\${{ env.TRIPLET }}\lib\pkgconfig'
          $pc2     = Join-Path $env:VCPKG_ROOT 'installed\${{ env.TRIPLET }}\share\pkgconfig'
          $prefixFw = ($env:VCPKG_ROOT -replace '\\','/')
          Add-Content $env:GITHUB_ENV "PKG_CONFIG=$pkgconf"
          Add-Content $env:GITHUB_ENV "PKG_CONFIG_PATH=$pc1;$pc2"
          Add-Content $env:GITHUB_ENV "CMAKE_PREFIX_PATH=$($env:VCPKG_ROOT)\installed\${{ env.TRIPLET }}"
          Add-Content $env:GITHUB_ENV "VCPKG_PREFIX_FW=$prefixFw"

      # --- Clone Wireshark and drop in your custom dissector ------------------
      - name: Clone Wireshark sources
        shell: bash
        run: |
          git clone https://gitlab.com/wireshark/wireshark.git
          cd wireshark
          git fetch --tags --force
          git checkout "${{ github.event.inputs.WIRESHARK_TAG || 'v4.4.8' }}"

      - name: Inject custom packet-asterix.c
        shell: powershell
        run: |
          Copy-Item -Force ".\packet

# .github/workflows/build-wireshark-win64.yml
name: Build Wireshark Win64 (custom asterix)

on:
  workflow_dispatch:
    inputs:
      WIRESHARK_TAG:
        description: "Wireshark git tag (e.g., v4.4.8)"
        required: false
        default: "v4.4.8"
  push:
    branches: [ main, master ]

jobs:
  build-win64:
    runs-on: windows-2022
    env:
      CONFIG: RelWithDebInfo
      WIRESHARK_BASE_DIR: C:\Development
      WIRESHARK_LIBS_DIR: C:\Development\wireshark-x64-libs-4.4

    steps:
      - name: Checkout (repo contains packet-asterix.c)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install build tools (CMake 3.27.9, NSIS, winflexbison)
        shell: powershell
        run: |
          choco install -y cmake --version=3.27.9 --allow-downgrade --installargs 'ADD_CMAKE_TO_PATH=System'
          choco install -y nsis 7zip winflexbison3

      - name: Install Qt 6 (MSVC 2022 x64)
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.8.3'
          target: 'desktop'
          arch: 'win64_msvc2022_64'
          cache: true
          modules: 'qt5compat qtmultimedia debug_info'

      - name: Export Qt dir for Wireshark
        shell: powershell
        run: |
          "WIRESHARK_QT6_PREFIX_PATH=$env:QT_ROOT_DIR" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Ensure base dir exists
        shell: powershell
        run: New-Item -ItemType Directory -Force "$env:WIRESHARK_BASE_DIR" | Out-Null

      - name: Clone Wireshark sources
        shell: cmd
        run: |
          git clone https://gitlab.com/wireshark/wireshark.git
          cd wireshark
          git fetch --tags --force
          git checkout "%WIRESHARK_TAG%"
        env:
          WIRESHARK_TAG: ${{ github.event.inputs.WIRESHARK_TAG || 'v4.4.8' }}

      - name: Inject custom packet-asterix.c
        shell: powershell
        run: |
          Copy-Item -Force ".\packet-asterix.c" ".\wireshark\epan\dissectors\packet-asterix.c"

      - name: Fetch Wireshark 3rd-party libs (win-setup.ps1)
        shell: powershell
        run: |
          Set-ExecutionPolicy -Scope Process Bypass -Force
          Push-Location .\wireshark
          $cmake = (Get-Command cmake).Source
          .\tools\win-setup.ps1 -Destination "$env:WIRESHARK_LIBS_DIR" -Platform x64 -CMakeExecutable "$cmake"
          Pop-Location

      - name: Clean previous build dir (if any)
        shell: powershell
        run: Remove-Item -Recurse -Force -ErrorAction SilentlyContinue build

      - name: Locate Windows SDK bcrypt.lib
        shell: powershell
        run: |
          $base = 'C:\Program Files (x86)\Windows Kits\10\Lib'
          $best = Get-ChildItem $base -Directory | Where-Object { $_.Name -match '^\d+\.\d+\.\d+\.\d+$' } |
                  Sort-Object Name -Descending | Select-Object -First 1
          if (-not $best) { throw "Windows 10/11 SDK not found under $base" }
          $lib = Join-Path $best.FullName 'um\x64\bcrypt.lib'
          if (-not (Test-Path $lib)) { throw "bcrypt.lib not found at $lib" }
          "BCRYPT_LIB=$lib" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Check Qt rcc presence
        shell: powershell
        run: |
          $rcc = Join-Path $env:WIRESHARK_QT6_PREFIX_PATH 'bin\rcc.exe'
          if (!(Test-Path $rcc)) { throw "Qt rcc not found at $rcc" }
          Write-Host "Found rcc at $rcc"

      # Ruby + Asciidoctor: needed so wireshark.html exists for NSIS
      - name: Install Ruby
        shell: powershell
        run: choco install -y ruby

      - name: Install Asciidoctor gem
        shell: powershell
        run: |
          $rubyBin = (Get-ChildItem 'C:\tools' -Directory -Filter 'ruby*' | Sort-Object Name -Descending | Select-Object -First 1).FullName + '\bin'
          if (-not (Test-Path $rubyBin)) { $rubyBin = 'C:\Ruby31-x64\bin' }
          $env:Path = "$rubyBin;$env:Path"
          gem install asciidoctor --no-document
          "PATH=$rubyBin;$env:Path" | Out-File -FilePath $env:GITHUB_ENV -Append
          "ASCIIDOCTOR_EXECUTABLE=$rubyBin\asciidoctor.bat" | Out-File -FilePath $env:GITHUB_ENV -Append

      # Configure with VS toolchain env so VCINSTALLDIR etc. are set
      - name: Configure (CMake + VS 2022 x64)
        shell: cmd
        run: |
          for %%I in (Enterprise,Professional,Community) do (
            if exist "C:\Program Files\Microsoft Visual Studio\2022\%%I\VC\Auxiliary\Build\vcvars64.bat" (
              call "C:\Program Files\Microsoft Visual Studio\2022\%%I\VC\Auxiliary\Build\vcvars64.bat"
              goto :okvc
            )
          )
          :okvc
          cmake -S wireshark -B build -G "Visual Studio 17 2022" -A x64 ^
            -DCMAKE_PREFIX_PATH="%WIRESHARK_QT6_PREFIX_PATH%" ^
            -DBcrypt_LIBRARY="%BCRYPT_LIB%"

      - name: Prebuild Qt UI objlib
        shell: cmd
        run: |
          for %%I in (Enterprise,Professional,Community) do (
            if exist "C:\Program Files\Microsoft Visual Studio\2022\%%I\VC\Auxiliary\Build\vcvars64.bat" (
              call "C:\Program Files\Microsoft Visual Studio\2022\%%I\VC\Auxiliary\Build\vcvars64.bat"
              goto :okvc
            )
          )
          :okvc
          cmake --build build --config %CONFIG% --target qtui

      # --- Build required binaries for packaging (fixes missing dumpcap.exe) ---
      - name: Build core binaries (wireshark + tshark + dumpcap)
        shell: cmd
        run: |
          for %%I in (Enterprise,Professional,Community) do (
            if exist "C:\Program Files\Microsoft Visual Studio\2022\%%I\VC\Auxiliary\Build\vcvars64.bat" (
              call "C:\Program Files\Microsoft Visual Studio\2022\%%I\VC\Auxiliary\Build\vcvars64.bat"
              goto :okvc
            )
          )
          :okvc
          cmake --build build --config %CONFIG% --target wireshark tshark dumpcap

      # You can also use: cmake --build build --config %CONFIG% --target ALL_BUILD

      # Build docs + prep packaging (now the files exist in run\RelWithDebInfo)
      - name: Prep NSIS packaging
        shell: cmd
        run: |
          for %%I in (Enterprise,Professional,Community) do (
            if exist "C:\Program Files\Microsoft Visual Studio\2022\%%I\VC\Auxiliary\Build\vcvars64.bat" (
              call "C:\Program Files\Microsoft Visual Studio\2022\%%I\VC\Auxiliary\Build\vcvars64.bat"
              goto :okvc
            )
          )
          :okvc
          cmake --build build --config %CONFIG% --target wireshark_nsis_prep

      - name: Build NSIS installer
        shell: cmd
        run: |
          for %%I in (Enterprise,Professional,Community) do (
            if exist "C:\Program Files\Microsoft Visual Studio\2022\%%I\VC\Auxiliary\Build\vcvars64.bat" (
              call "C:\Program Files\Microsoft Visual Studio\2022\%%I\VC\Auxiliary\Build\vcvars64.bat"
              goto :okvc
            )
          )
          :okvc
          cmake --build build --config %CONFIG% --target wireshark_nsis

      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: wireshark-installer
          path: build/packaging/nsis/*.exe

      # ---- Portable (no installer): zip run\RelWithDebInfo -------------------
      - name: Create portable launcher and ZIP
        shell: powershell
        run: |
          $runDir = "build\run\RelWithDebInfo"
          if (!(Test-Path $runDir)) { throw "Run dir not found: $runDir" }

          $launcher = Join-Path $runDir "Wireshark-Portable.cmd"
          $lines = @(
            '@echo off'
            'setlocal'
            'set "WIRESHARK_CONFIG_DIR=%~dp0config"'
            'if not exist "%WIRESHARK_CONFIG_DIR%" mkdir "%WIRESHARK_CONFIG_DIR%"'
            'start "" "%~dp0Wireshark.exe" %*'
          )
          $lines | Set-Content -Encoding Ascii $launcher

          7z a -r "build\wireshark-portable-win64.zip" "$runDir\*"

      - name: Upload portable artifact
        uses: actions/upload-artifact@v4
        with:
          name: wireshark-portable
          path: build/wireshark-portable-win64.zip
